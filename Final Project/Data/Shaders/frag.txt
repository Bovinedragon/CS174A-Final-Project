#version 140

in vec2 texCoord;
in vec3 normal;
in vec4 position;
out vec4 fColor; 

uniform bool b_useTexture0;
uniform sampler2D texture0;

uniform vec3 eyePosition;
uniform vec3 lightDirection;
uniform vec3 lightCombinedAmbient;
uniform vec3 lightCombinedDiffuse;
uniform vec3 lightCombinedSpecular;
uniform float materialSpecularExponent;

void main() { 
	fColor = vec4(0.0f, 0.0f, 0.0f, 1.0f);

	vec3 lightVec = normalize(lightDirection);
	vec3 eyeVec = normalize(position.xyz - eyePosition);
	vec3 normalVec = normalize(normal);
	vec3 halfVec = (lightDirection + eyeVec) / 2.0f;

	fColor +=	vec4(
				lightCombinedAmbient +												// Ambient Light
				max(dot(normalVec, lightVec), 0.0f) * lightCombinedDiffuse +		// Diffuse Light
				pow(max(dot(halfVec, normalVec), 0.0f), materialSpecularExponent)	// Specular Light
				, 0.0f);	

	if (b_useTexture0) {
		fColor *= texture2D(texture0, texCoord);
	}
}