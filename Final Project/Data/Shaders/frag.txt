#version 140

in vec2 texCoord;
in vec3 normal;
in vec3 reflected;
out vec4 fColor; 

uniform bool b_useDiffuseTexture;
uniform sampler2D diffuseTexture;

uniform bool b_useEnvironmentMap;
uniform samplerCube environmentMap;

uniform vec3 lightDirection;
uniform vec3 lightCombinedAmbient;
uniform vec3 lightCombinedDiffuse;
uniform vec3 lightCombinedSpecular;
uniform float materialSpecularExponent;
uniform float materialGloss;

void main() { 
	fColor = vec4(0.0f, 0.0f, 0.0f, 1.0f);

	vec3 lightVec = normalize(lightDirection);
	vec3 normalVec = normalize(normal);
	vec3 reflectedVec = normalize(reflected);

	// ambient and diffuse lighting
	fColor +=	vec4(
				lightCombinedAmbient +
				max(dot(normalVec, lightVec), 0.0f) * lightCombinedDiffuse
				, 0.0f);	

	// diffuse texture
	if (b_useDiffuseTexture) {
		fColor *= texture2D(diffuseTexture, texCoord);
	}

	// Clamp higher than 1.0f so it has a bit of fake HDR bleed
	fColor = vec4(clamp(fColor.x, 0.0f, 2.0f), clamp(fColor.y, 0.0f, 2.0f), clamp(fColor.z, 0.0f, 2.0f), 1.0f);

	// specular highlight
	vec3 shine = pow(max(dot(reflectedVec, lightVec), 0.0f), materialSpecularExponent) * lightCombinedSpecular;

	// environment highlight
	if (b_useEnvironmentMap) {
		shine += texture(environmentMap, reflectedVec).xyz * materialGloss;
	}

	// add shine component to color
	fColor += vec4(shine, 0.0f);
}